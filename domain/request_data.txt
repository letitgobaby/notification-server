@AggregateRoot
public record NotificationRequest(
    Requester requester,
    List<RecipientReference> recipients,
    List<NotificationType> notificationTypes,
    Map<NotificationType, SenderInfo> senderInfos,
    NotificationContent content,                     // 직접 작성
    TemplateInfo template,                           // 템플릿 사용
    Instant scheduledAt,
    String memo
) {}



@AggregateRoot
@Getter
@Builder
public class NotificationMessage {

    private final NotificationMessageId messageId;
    private final NotificationRequestId requestId;
    private final NotificationType notificationType;
    private final Recipient recipient;
    private final NotificationContent notificationContent;
    private final SenderInfo senderInfo;
    private DeliveryStatus deliveryStatus;
    private Instant scheduledAt;
    private Instant dispatchedAt;
    private String failureReason;
    private final Instant createdAt;

    public void markDispatched(Instant dispatchedAt) {
        this.dispatchedAt = dispatchedAt;
        this.deliveryStatus = DeliveryStatus.DISPATCHED;
    }

    public void markFailed(String reason) {
        this.deliveryStatus = DeliveryStatus.FAILED;
        this.failureReason = reason;
    }
}



public enum NotificationType {
    SMS, EMAIL, PUSH;
}

public enum DeliveryStatus {
    PENDING, DISPATCHED, FAILED
}

public record Requester(RequesterType type, String id) {}

public enum RequesterType {
    USER, ADMIN, SERVICE
}




// 수신자 유형
public sealed interface RecipientReference permits UserRecipient, DirectRecipient, AllUserRecipient, SegmentRecipient {}

public record UserRecipient(String userId) implements RecipientReference {}

public record DirectRecipient(String emailAddress, String phoneNumber, String deviceToken) implements RecipientReference {}

public record AllUserRecipient() implements RecipientReference {}

public record SegmentRecipient(String segmentName) implements RecipientReference {}

// 실제 발송 수신자
public record Recipient(String userId, String email, String phoneNumber, String deviceToken, String language) {}

// 발신자
public sealed interface SenderInfo permits SmsSender, EmailSender, PushSender {}

public record SmsSender(String senderPhoneNumber, String senderName) implements SenderInfo {}

public record EmailSender(String senderEmailAddress, String senderName) implements SenderInfo {}

public record PushSender(String senderName) implements SenderInfo {}

// 콘텐츠
public record NotificationContent(String title, String body, String redirectUrl, String imageUrl) {}

public record TemplateInfo(String templateId, Map<String, String> parameters) {}













@Service
@RequiredArgsConstructor
public class NotificationRequestParser {

    private final UserInfoProvider userInfoProvider;
    private final TemplateEngine templateEngine;

    public Flux<NotificationMessage> parse(NotificationRequest request) {
        return resolveRecipients(request.recipients())
            .flatMap(recipient -> Flux.fromIterable(request.notificationTypes())
                .flatMap(type -> buildMessage(request, recipient, type)));
    }

    private Flux<Recipient> resolveRecipients(List<RecipientReference> references) {
        return Flux.fromIterable(references)
            .flatMap(ref -> {
                if (ref instanceof UserRecipient user) {
                    return userInfoProvider.fetchUserInfo(user.userId());
                } else if (ref instanceof DirectRecipient direct) {
                    return Mono.just(new Recipient(
                        null,
                        direct.emailAddress(),
                        direct.phoneNumber(),
                        direct.deviceToken(),
                        "ko" // fallback
                    ));
                } else {
                    return Mono.empty(); // AllUserRecipient, SegmentRecipient는 pre-processing 대상
                }
            });
    }

    private Mono<NotificationMessage> buildMessage(NotificationRequest request, Recipient recipient, NotificationType type) {
        NotificationContent content;

        if (request.template() != null) {
            content = templateEngine.render(
                request.template(),
                recipient.language(),
                type
            );
        } else {
            content = request.content();
        }

        return Mono.just(NotificationMessage.builder()
            .messageId(NotificationMessageId.newId())
            .requestId(NotificationRequestId.from(request))
            .notificationType(type)
            .recipient(recipient)
            .notificationContent(content)
            .senderInfo(request.senderInfos().get(type))
            .deliveryStatus(DeliveryStatus.PENDING)
            .scheduledAt(request.scheduledAt())
            .createdAt(Instant.now())
            .build());
    }
}















@Entity
@Table(name = "notification_request")
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
@Builder
public class NotificationRequestEntity {

    @Id
    @Column(name = "request_id", length = 36)
    private String requestId;  // UUID 문자열

    @Enumerated(EnumType.STRING)
    @Column(name = "requester_type", nullable = false, length = 20)
    private RequesterType requesterType;

    @Column(name = "requester_id", nullable = false, length = 50)
    private String requesterId;

    @Column(name = "recipient_type", length = 20)
    private String recipientType;  // SINGLE_USER, MULTI_USER, SEGMENT, ALL_USERS, MIXED 등 (간단히 문자열로)

    @Column(name = "recipient_user_ids", columnDefinition = "TEXT")
    private String recipientUserIdsJson;  // JSON 배열 문자열 (userId 리스트)

    @Column(name = "direct_recipients", columnDefinition = "TEXT")
    private String directRecipientsJson;  // JSON 배열 문자열 (직접 연락처 목록)

    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "notification_request_channels", joinColumns = @JoinColumn(name = "request_id"))
    private Set<NotificationType> notificationTypes;  // 예: [EMAIL, PUSH]

    @Column(name = "sender_info", columnDefinition = "TEXT")
    private String senderInfoJson;  // 각 채널별 발신자 정보 JSON (맵 형태)

    @Column(name = "content", columnDefinition = "TEXT")
    private String contentJson;  // 직접 작성한 알림 내용 JSON (title, body, ...)

    @Column(name = "template_info", columnDefinition = "TEXT")
    private String templateInfoJson;  // 템플릿 ID와 변수 JSON

    @Column(name = "scheduled_at")
    private Instant scheduledAt;

    @Column(name = "memo", length = 500)
    private String memo;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", length = 20)
    private NotificationRequestStatus status;  // 상태 예: RECEIVED, PROCESSING, COMPLETED, FAILED

    @Column(name = "created_at", nullable = false, updatable = false)
    private Instant createdAt;

    @Column(name = "updated_at")
    private Instant updatedAt;

    @PrePersist
    public void prePersist() {
        createdAt = Instant.now();
        updatedAt = createdAt;
    }

    @PreUpdate
    public void preUpdate() {
        updatedAt = Instant.now();
    }
}















@Entity
@Table(name = "notification_message")
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
@Builder
public class NotificationMessageEntity {

    @Id
    @Column(name = "message_id", length = 36)
    private String messageId;  // UUID

    @Column(name = "request_id", length = 36, nullable = false)
    private String requestId;  // NotificationRequest와 연관

    @Enumerated(EnumType.STRING)
    @Column(name = "notification_type", length = 20, nullable = false)
    private NotificationType notificationType;

    @Column(name = "user_id", length = 36)
    private String userId;  // 회원 ID (nullable)

    @Column(name = "phone_number", length = 20)
    private String phoneNumber;

    @Column(name = "email", length = 255)
    private String email;

    @Column(name = "device_token", length = 255)
    private String deviceToken;

    @Column(name = "title", length = 255)
    private String title;

    @Column(name = "body", columnDefinition = "TEXT")
    private String body;

    @Column(name = "redirect_url", columnDefinition = "TEXT")
    private String redirectUrl;

    @Column(name = "image_url", columnDefinition = "TEXT")
    private String imageUrl;

    @Column(name = "sender_info", columnDefinition = "TEXT")
    private String senderInfoJson;  // JSON으로 저장 (발신자 정보)

    @Enumerated(EnumType.STRING)
    @Column(name = "delivery_status", length = 20)
    private DeliveryStatus deliveryStatus;

    @Column(name = "scheduled_at")
    private Instant scheduledAt;

    @Column(name = "dispatched_at")
    private Instant dispatchedAt;

    @Column(name = "failure_reason", columnDefinition = "TEXT")
    private String failureReason;

    @Column(name = "created_at", nullable = false, updatable = false)
    private Instant createdAt;

    @PrePersist
    public void prePersist() {
        createdAt = Instant.now();
    }
}










@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class NotificationRequestDto {

    private RequesterDto requester;
    private RecipientsDto recipients;
    private List<NotificationType> notificationTypes;
    private Map<NotificationType, SenderInfoDto> senderInfos;

    private TemplateDto template;            // optional
    private NotificationContentDto content;  // optional

    private Instant scheduledAt;             // optional
    private String memo;                     // optional
}


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RequesterDto {
    private RequesterType type;  // USER, SERVICE, ADMIN
    private String id;
}

public enum RequesterType {
    USER, SERVICE, ADMIN
}

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RecipientsDto {

    private Boolean allUsers; // true일 경우 전체 발송
    private String segment;   // 세그먼트 이름
    private List<String> userIds; // 회원 userId 목록
    private List<DirectRecipientDto> directRecipients; // 비회원 대상
}



@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DirectRecipientDto {
    private String phoneNumber;
    private String email;
    private String deviceToken;
}



@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class SenderInfoDto {
    private String senderPhoneNumber;
    private String senderEmailAddress;
    private String senderName;
}



@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TemplateDto {
    private String templateId;
    private Map<String, String> templateParameters;
}




@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class NotificationContentDto {
    private String title;
    private String body;
    private String redirectUrl;
    private String imageUrl;
}